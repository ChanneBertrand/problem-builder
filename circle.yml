version: 2.1
orbs:
  browser-tools: circleci/browser-tools@1.2.1
jobs:
  build:
    docker:
      - image: <<parameters.docker_image>>
      - image: circleci/mysql:5.7
        command: mysqld --character-set-server=latin1 --collation-server=latin1_swedish_ci
        environment:
          MYSQL_ROOT_PASSWORD: rootpw
    parameters:
        test_command:
            type: string
        docker_image:
            type: string
        parallel:
            default: 1
            type: integer
    parallelism: <<parameters.parallel>>
    environment:
      MOZ_HEADLESS: 1
      WORKBENCH_DATABASES: '{"default": {"ENGINE": "django.db.backends.mysql", "NAME": "db", "USER": "root", "PASSWORD": "rootpw", "HOST": "127.0.0.1", "OPTIONS": {"charset": "utf8mb4"}}}'
    steps:
      - checkout
      - browser-tools/install-firefox
      - browser-tools/install-geckodriver
      - run:
          name: Sync submodules
          command: git submodule sync
      - run:
          name: Update submodules
          command: git submodule update --init
      - run:
          name: Run tests
          command: |
            mkdir -p /tmp/coverage/$CIRCLE_SHA1
            virtualenv venv
            source venv/bin/activate
            mkdir var
            pip -q install -r requirements.txt
            pip -q install -r requirements-dev.txt
            pip -q install -r test_requirements.txt
            pip install -e .
            <<parameters.test_command>>
            if [ -e .coverage* ]; then
                cp .coverage* /tmp/coverage/$CIRCLE_SHA1/.
            fi
      - persist_to_workspace:
          root: /tmp
          paths:
              - coverage

  coverage:
    docker:
      - image: <<parameters.docker_image>>
    parameters:
        docker_image:
            type: string
    steps:
      - checkout
      - run:
          name: Update system and install deps
          command: |
            sudo apt-get update
            virtualenv venv
            source venv/bin/activate
            pip install 'coverage==5.0.3'
      - attach_workspace:
          at: /tmp/workspace
      - run:
          command: |
              source venv/bin/activate
              coverage combine /tmp/workspace/coverage/$CIRCLE_SHA1/
              coverage report

  deploy:
    docker:
      - image: <<parameters.docker_image>>
    parameters:
        docker_image:
            type: string
        dist_type:
            type: string
    steps:
      - checkout
      - restore_cache:
          key: dependencies-{{ checksum "circle.yml" }}-{{ checksum "setup.py" }}
      - run:
          name: Install dependencies
          command: |
            virtualenv venv
            source venv/bin/activate
            pip install -U pip twine wheel
      - save_cache:
          key: dependencies-{{ checksum "circle.yml" }}-{{ checksum "setup.py" }}
          paths:
            - "venv"
      - run:
          name: Verify commit is tagged and tag matches version
          command: |
            source venv/bin/activate
            python setup.py verify_tag
      - run:
          name: Initialize .pypirc
          command: |
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username = opencraft" >> ~/.pypirc
            echo -e "password = $PYPI_PASSWORD" >> ~/.pypirc
      - run:
          name: Create packages
          command: |
            source venv/bin/activate
            python setup.py <<parameters.dist_type>>
      - run:
          name: Upload to pypi
          command: |
            source venv/bin/activate
            twine upload dist/*

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build:
          name: py38-quality
          test_command: make quality
          docker_image: cimg/python:3.8-browsers
          filters:
            tags:
              only: /.*/
      - build:
          name: py38-unit
          test_command: make test.unit
          docker_image: cimg/python:3.8-browsers
          filters:
            tags:
              only: /.*/
      - build:
          name: py38-integration
          parallel: 4
          test_command: |
            set -e
            TEST_FILES=$(circleci tests glob "problem_builder/tests/integration/test_*.py" | circleci tests split --split-by=timings)
            pytest --verbose  $TEST_FILES
          docker_image: cimg/python:3.8-browsers
          filters:
            tags:
              only: /.*/
      - coverage:
          name: py38-coverage
          docker_image: cimg/python:3.8
          filters:
            tags:
              only: /.*/
          requires:
              - py38-quality
              - py38-unit
              - py38-integration
      - deploy:
          name: py38-deploy-bdist_wheel
          docker_image: cimg/python:3.8
          dist_type: bdist_wheel
          requires:
            - py38-coverage
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
            branches:
              ignore: /.*/
